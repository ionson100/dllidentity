<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ORM{1_21}</name>
    </assembly>
    <members>
        <member name="T:ORM_1_21_.AttributesOfClass`1">
            <summary>
                Служебный класс для генерации  данных рефлексии бывшего табличного класса
            </summary>
            <typeparam name="T">Тип  класса</typeparam>
        </member>
        <member name="T:ORM_1_21_.Attribute.BaseAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.BaseAttribute.ColumnName">
            <summary>
            Название колонки в таблице  базы
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.BaseAttribute.PropertyName">
            <summary>
            Название свойства, которое соответствует данной
            колонке в таблице, в классе сущности
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.BaseAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="T:ORM_1_21_.Attribute.MapIndexAttribute">
            <summary>
            Отмечаются индексируемые поля
            </summary>
        </member>
        <member name="T:ORM_1_21_.Attribute.MapTableNameAttribute">
            <summary>
            Атрибут для навешивания названия таблицы на класс сущности.
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.MapTableNameAttribute.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="tableName">Название таблицы в базе данных</param>
        </member>
        <member name="M:ORM_1_21_.Attribute.MapTableNameAttribute.#ctor(System.String,System.String)">
            <summary>
             Конструктор Определяет название таблицы, условие для всех выборок
            </summary>
            <param name="tableName">Название таблицы в базе данных</param>
            <param name="sqlWhere">добавление критериея запроса по where пример: "id='1'"</param>
        </member>
        <member name="P:ORM_1_21_.Attribute.MapTableNameAttribute.TableName">
            <summary>
            Название таблицы в базе данных
            </summary>
        </member>
        <member name="T:ORM_1_21_.Attribute.MapTypeMysqlTableAttribite">
            <summary>
            Информация для создания определенного типа таблиц, только для MySql пример: ENGINE=InnoDB  DEFAULT CHARSET=UTF8;
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.MapTypeMysqlTableAttribite.#ctor(System.String)">
            <summary>
            .ctor
            </summary>
            <param name="tableType">строка, которая будет участвовать при создании таблиы</param>
        </member>
        <member name="T:ORM_1_21_.Attribute.MapPrimaryKeyAttribute">
            <summary>
            Атрибут для указания первичного ключа для таблицы ( составные ключи не работают)
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.MapPrimaryKeyAttribute.#ctor(System.String,ORM_1_21_.Generator)">
            <summary>
            Аттрибут первичного ключа
            </summary>
            <param name="columnName">Название поля</param>
            <param name="generator">Тип генерации зачения на ключ, native-автоинремент,assigned-назначенный в рукопашную</param>
        </member>
        <member name="P:ORM_1_21_.Attribute.MapPrimaryKeyAttribute.ColumnNameForRider">
            <summary>
            Название колонки первичного 
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.MapPrimaryKeyAttribute.TypeColumn">
            <summary>
            Тип колонки первичного ключа
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.MapPrimaryKeyAttribute.Generator">
            <summary>
            Тип генератора первичного ключа в базе
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.MapPrimaryKeyAttribute.DbType">
            <summary>
            Тип поля в базе данных
            </summary>
        </member>
        <member name="T:ORM_1_21_.Attribute.MapColumnNameAttribute">
            <summary>
            Атрибуты для класса слоя, определяют название  колонки в таблице
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.MapColumnNameAttribute.IsIndex">
            <summary>
            поле индексируется
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.MapColumnNameAttribute.TypeString">
            <summary>
            
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.MapColumnNameAttribute.#ctor(System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="nameColumnTable">Название колонки в таблице  базы</param>
        </member>
        <member name="T:ORM_1_21_.Attribute.MapDefaultValueAttribute">
            <summary>
            значение по умолчанию при создании таблицы 
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.MapDefaultValueAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.MapDefaultValueAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="valueAsString"></param>
        </member>
        <member name="T:ORM_1_21_.Attribute.MapColumnTypeAttribute">
            <summary>
            значение по умолчанию при создании таблицы 
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.MapColumnTypeAttribute.TypeString">
            <summary>
            
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.MapColumnTypeAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="T:ORM_1_21_.Attribute.CurrentTableAtribute">
            <summary>
            Атрибут для класса слоя, определяет тип и название колонки.Применяется только при транформацию листа в таблицу
            </summary>
        </member>
        <member name="M:ORM_1_21_.Attribute.CurrentTableAtribute.#ctor(System.Type,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="type">Тип колонки в создаваемой таблице</param>
            <param name="nameColumn">Название колонки в создаваемой таблице</param>
        </member>
        <member name="P:ORM_1_21_.Attribute.CurrentTableAtribute.GetTypeColumn">
            <summary>
            Тип колонки в создаваемой таблице
            </summary>
        </member>
        <member name="P:ORM_1_21_.Attribute.CurrentTableAtribute.GetNameColumn">
            <summary>
            Название колонки в создаваемой таблице
            </summary>
        </member>
        <member name="T:ORM_1_21_.Configure">
            <summary>
                Базовый класс для конфигурации
            </summary>
        </member>
        <member name="M:ORM_1_21_.Configure.GetConnectionString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ORM_1_21_.Configure.LogFileName">
            <summary>
            
            </summary>
        </member>
        <member name="M:ORM_1_21_.Configure.#ctor(System.String,ORM_1_21_.ProviderName,System.String)">
            <summary>
            Конструктор
            </summary>
            <param name="connectionString">Строка соединения с базой</param>
            <param name="provider">Провайдер соединения с базой</param>
            <param name="logFileName">Путь и название файла, куда будем писать логи, его отсутствие (null) отменяет запиь в файл.</param>
        </member>
        <member name="P:ORM_1_21_.Configure.Provider">
            <summary>
            Провайдер, которы использует орм в текущий момент
            </summary>
        </member>
        <member name="M:ORM_1_21_.Configure.GetSession">
             <summary>
            Получение сессии
             </summary>
             <returns></returns>
             <exception cref="T:System.Exception"></exception>
        </member>
        <member name="E:ORM_1_21_.Configure.onErrorOrm">
            <summary>
            
            </summary>
        </member>
        <member name="M:ORM_1_21_.Configure.WriteLogFile(System.String)">
            <summary>
            Запись в лог файл при наличии разрешения на запись при  созданом конфиге, и  определения файла куда писать.
            </summary>
            <param name="message">текст сообщения</param>
        </member>
        <member name="T:ORM_1_21_.FactoryGreaterTable">
            <summary>
            
            </summary>
        </member>
        <member name="T:ORM_1_21_.Linq.ExpressionVisitor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ORM_1_21_.Linq.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            
            </summary>
            <param name="unaryExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="binaryExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            
            </summary>
            <param name="constantExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            
            </summary>
            <param name="memberExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            
            </summary>
            <param name="methodCallExpression"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            
            </summary>
            <param name="original"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            
            </summary>
            <param name="nex"></param>
            <returns></returns>
        </member>
        <member name="T:ORM_1_21_.Linq.Query`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ORM_1_21_.Linq.Query`1._provider">
            <summary>
            Провайдер
            </summary>
        </member>
        <member name="M:ORM_1_21_.Linq.Query`1.#ctor(ORM_1_21_.Linq.QueryProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ORM_1_21_.Linq.Query`1.#ctor(ORM_1_21_.Linq.QueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="provider"></param>
            <param name="expression"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ORM_1_21_.Linq.Query`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.Query`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.Query`1.GetTypeQuery">
            <summary>
            Тип 
            </summary>
            <returns></returns>
        </member>
        <member name="T:ORM_1_21_.Linq.QueryProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:ORM_1_21_.Linq.QueryProvider.GetQueryText(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.QueryProvider.Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <typeparam name="TS"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.QueryProvider.ExecuteSPP``1(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <typeparam name="TS"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Linq.QueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:ORM_1_21_.Parameter">
            <summary>
            Еденица параметра, для запроса с параметрами
            </summary>
        </member>
        <member name="P:ORM_1_21_.Parameter.Name">
            <summary>
            Имя парметра
            </summary>
        </member>
        <member name="P:ORM_1_21_.Parameter.Value">
            <summary>
            Значение пераметра
            </summary>
        </member>
        <member name="M:ORM_1_21_.Parameter.#ctor(System.String,System.Object)">
            <summary>
            Ctor
            </summary>
            <param name="name">Имя парметра</param>
            <param name="value">Имя парметра</param>
        </member>
        <member name="T:ORM_1_21_.ParameterStoredPr">
            <summary>
            Еденица параметра, для запроса с параметрами
            </summary>
        </member>
        <member name="P:ORM_1_21_.ParameterStoredPr.Name">
            <summary>
            Имя парметра
            </summary>
        </member>
        <member name="P:ORM_1_21_.ParameterStoredPr.Value">
            <summary>
            Значение пераметра
            </summary>
        </member>
        <member name="P:ORM_1_21_.ParameterStoredPr.Direction">
            <summary>
            Перечисление типа параметра
            </summary>
        </member>
        <member name="M:ORM_1_21_.ParameterStoredPr.#ctor(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Ctor
            </summary>
            <param name="name">Имя парметра</param>
            <param name="value">Имя парметра</param>
            <param name="direction">ParameterDirection </param>
        </member>
        <member name="T:ORM_1_21_.ProviderName">
            <summary>
            Type providers for databse
            </summary>
        </member>
        <member name="F:ORM_1_21_.ProviderName.MsSql">
            <summary>
            </summary>
        </member>
        <member name="F:ORM_1_21_.ProviderName.MySql">
            <summary>
            </summary>
        </member>
        <member name="F:ORM_1_21_.ProviderName.Postgresql">
            <summary>
            
            </summary>
        </member>
        <member name="T:ORM_1_21_.Helper">
            <summary>
                Расширения для построения запроса
            </summary>
        </member>
        <member name="M:ORM_1_21_.Helper.SaveOrUpdate``1(System.Linq.IQueryable{``0},``0)">
            <summary>
                Сохранение или добавление объекта в базу
            </summary>
            <param name="coll"></param>
            <param name="obj"></param>
            <typeparam name="T">сохраняемый или добавляемый обект в базу</typeparam>
        </member>
        <member name="M:ORM_1_21_.Helper.FreeExpression``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression)">
            <summary>
            </summary>
            <param name="coll"></param>
            <param name="expression"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TRes"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.DistinctCore``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            </summary>
            <param name="coll"></param>
            <param name="exp"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.GroupByCore``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Группировка по полю с  условием ключа.
            </summary>
            <param name="coll"></param>
            <param name="exp"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.GroupByCore``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
             <summary>
            Группировка по полю с  анoнимным выбором
             </summary>
             <param name="coll"></param>
             <param name="key"></param>
             <param name="exp"></param>
             <typeparam name="T"></typeparam>
             <typeparam name="TKey"></typeparam>
             <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Delete``1(System.Linq.IQueryable{``0},``0)">
            <summary>
            Удаление объекта полученого ранее из базы
            </summary>
            <param name="coll"></param>
            <param name="obj">Удаляемы объект, он должен быть получен из базы</param>
            <typeparam name="T">Тип проекции таблицы</typeparam>
        </member>
        <member name="M:ORM_1_21_.Helper.Delete``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Удаление обьекта по параметрам
            </summary>
            <param name="coll"></param>
            <param name="exp">передикат на удаление</param>
            <typeparam name="T">Тип проекции таблицы</typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Limit``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
                LIMIT всегда ставится в конце предложения LIMIT ( начало позиции с учетом нуля, количество в выборке)
            </summary>
            <param name="coll"></param>
            <param name="start">Начало позиции</param>
            <param name="length">Количество записей</param>
            <typeparam name="T">Тип проекции таблицы</typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Limit(System.Linq.IQueryable{System.Decimal},System.Int32,System.Int32)">
            <summary>
                LIMIT всегда ставится в конце предложения LIMIT ( начало позиции с учетом нуля, количество в выборке)
            </summary>
            <param name="coll"></param>
            <param name="start">Начало позиции</param>
            <param name="length">Количество записей</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Limit(System.Linq.IQueryable{System.Single},System.Int32,System.Int32)">
            <summary>
                LIMIT всегда ставится в конце предложения LIMIT ( начало позиции с учетом нуля, количество в выборке)
            </summary>
            <param name="coll"></param>
            <param name="start">Начало позиции</param>
            <param name="length">Количество записей</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Limit(System.Linq.IQueryable{System.Int32},System.Int32,System.Int32)">
            <summary>
                LIMIT всегда ставится в конце предложения LIMIT ( начало позиции, количество в выборке)
            </summary>
            <param name="coll"></param>
            <param name="start">Начало позиции</param>
            <param name="length">Количество записей</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Limit(System.Linq.IQueryable{System.Int16},System.Int32,System.Int32)">
            <summary>
                LIMIT всегда ставится в конце предложения LIMIT ( начало позиции, количество в выборке)
            </summary>
            <param name="coll"></param>
            <param name="start">Начало позиции</param>
            <param name="length">Количество записей</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Limit(System.Linq.IQueryable{System.Int64},System.Int32,System.Int32)">
            <summary>
                LIMIT всегда ставится в конце предложения LIMIT ( начало позиции, количество в выборке)
            </summary>
            <param name="coll"></param>
            <param name="start">Начало позиции</param>
            <param name="length">Количество записей</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Limit(System.Linq.IQueryable{System.Object},System.Int32,System.Int32)">
            <summary>
                LIMIT всегда ставится в конце предложения LIMIT ( начало позиции, количество в выборке)
            </summary>
            <param name="coll"></param>
            <param name="start">Начало позиции</param>
            <param name="length">Количество записей</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Limit(System.Linq.IQueryable{System.Double},System.Int32,System.Int32)">
             <summary>
            LIMIT всегда ставится в конце предложения LIMIT ( от какой позиции выбираем, сколько выбираем)
             </summary>
             <param name="coll"></param>
             <param name="start">Начало позиции</param>
             <param name="length">Количество записей</param>
             <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Get``1(System.Linq.IQueryable{``0},System.Object)">
             <summary>
            Вытаскивание обьекта по ключу
             </summary>
             <param name="coll"></param>
             <param name="keyValue">Значение первичного ключа</param>
             <typeparam name="T">Тип проекции таблицы</typeparam>
             <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.GetImage(System.Byte[])">
            <summary>
                Преобразование массива байт в картинку
            </summary>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Split``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Разбиение на массивы
            </summary>
            <param name="source"></param>
            <param name="chunkLength">количество массивов</param>
            <typeparam name="T">Тип проекции таблицы</typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.SplitQueryable``1(System.Linq.IQueryable{``0},System.Int32)">
             <summary>
            разбиение на перечисления
             </summary>
             <param name="coll">исходное перечисление</param>
             <param name="splitSize">количество перечислений на выходе</param>
             <typeparam name="T">Тип проекции таблицы</typeparam>
             <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.Update``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.Dictionary{``1,``2}}})">
            <summary>
            Обновление таблицы без вытаскивания данных на клиента
            </summary>
            <param name="coll"></param>
            <param name="parametr">Словарь поле - значение</param>
            <typeparam name="T">Тип проекции таблицы</typeparam>
            <typeparam name="TKey">Свойство - поле</typeparam>
            <typeparam name="TValue">Значение</typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.FreeSql``1(ORM_1_21_.ISession,System.String,ORM_1_21_.Parameter[])">
            <summary>
                Выполенение произвольного запроса с параметрами
            </summary>
            <param name="ses">ISession</param>
            <param name="sql">Запрос</param>
            <param name="par">Параметры запроса</param>
            <typeparam name="TResult">Тип единицы Результата</typeparam>
            <returns>IEnumerableTResult</returns>
        </member>
        <member name="M:ORM_1_21_.Helper.FreeSqlMonster``1(ORM_1_21_.ISession,System.Data.IDataReader)">
            <summary>
            произвольный запрос к чужой базе
            </summary>
            <param name="ses"></param>
            <param name="dataReader"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Helper.ProcedureCall``1(ORM_1_21_.ISession,System.String)">
            <summary>
                Вызов хранимой процедуры
            </summary>
            <param name="ses">ISession</param>
            <param name="sql">Текст запроса</param>
            <typeparam name="TResult">Тип перечисления</typeparam>
            <returns>IEnumerable(TResult)</returns>
        </member>
        <member name="M:ORM_1_21_.Helper.ProcedureCallParam``1(ORM_1_21_.ISession,System.String,ORM_1_21_.ParameterStoredPr[])">
            <summary>
                Вызов хранимой процедуры с параметрами
            </summary>
            <param name="ses">ISession</param>
            <param name="sql">Текст процедуры</param>
            <param name="par">Праметры</param>
            <typeparam name="TResult">Тип еденицы перчисления</typeparam>
            <returns>IEnumerable(TResult)</returns>
        </member>
        <member name="T:ORM_1_21_.Generator">
            <summary>
            Тип генератора первичного ключа таблицы
            </summary>
        </member>
        <member name="F:ORM_1_21_.Generator.Native">
            <summary>
            автоинкримент
            </summary>
        </member>
        <member name="F:ORM_1_21_.Generator.Assigned">
            <summary>
            Назначаемый пользователем
            </summary>
        </member>
        <member name="T:ORM_1_21_.IActionDal`1">
            <summary>
            Сервисный интерфейс для обслуживания базы.Для своевременного действия, с работой  в базе
            отнаследуйте свой табличный тип от этого интерфейса, и можете контролировать в отбработчиках
            интерфейса, все этапы работы с базой
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ORM_1_21_.IActionDal`1.BeforeInsert(`0)">
            <summary>
            Перед вставкой
            </summary>
            <param name="item">обьект вставки</param>
        </member>
        <member name="M:ORM_1_21_.IActionDal`1.AfterInsert(`0)">
            <summary>
            После вставки
            </summary>
            <param name="item">обьект вставки</param>
        </member>
        <member name="M:ORM_1_21_.IActionDal`1.BeforeUpdate(`0)">
            <summary>
            Перед обновлением
            </summary>
            <param name="item">объект обновления</param>
        </member>
        <member name="M:ORM_1_21_.IActionDal`1.AfterUpdate(`0)">
            <summary>
            После обновления
            </summary>
            <param name="item">обьект обновления</param>
        </member>
        <member name="M:ORM_1_21_.IActionDal`1.BeforeDelete(`0)">
            <summary>
            Перед удалением
            </summary>
            <param name="item"> объект удаления</param>
        </member>
        <member name="M:ORM_1_21_.IActionDal`1.AfterDelete(`0)">
            <summary>
            Полсле удаления
            </summary>
            <param name="item">обьект после удаления, фантом.</param>
        </member>
        <member name="T:ORM_1_21_.ISession">
            <summary>
                Основной рабочий тип
            </summary>
        </member>
        <member name="P:ORM_1_21_.ISession.IsDispose">
            <summary>
                is enter Dispose?
            </summary>
        </member>
        <member name="M:ORM_1_21_.ISession.GetList``1(System.String,System.Object[])">
            <summary>
                запрос на выборку с параметрами
            </summary>
            <param name="sqlWhere">запрос на выборку, начиная с where  с праметрами</param>
            <param name="obj">список параметров в той последовательности в которой они идут в запросе.</param>
            <typeparam name="T">Тип сущности</typeparam>
            <returns>Перечисление выбранных объектов</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.GetListMonster``1(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.Save``1(``0)">
            <summary>
                Сохранение обьекта в базе равно как вставка или изменение
            </summary>
            <typeparam name="T">Тип обьекта</typeparam>
            <param name="item">Сохраняемый объект</param>
        </member>
        <member name="M:ORM_1_21_.ISession.Delete``1(``0)">
            <summary>
                Удаление объекта из базы, возвращаете количество удаленных объектов
            </summary>
            <typeparam name="T">Тип удаляемого объекта</typeparam>
            <param name="item">Удаляемый объект</param>
        </member>
        <member name="M:ORM_1_21_.ISession.BeginTransaction">
            <summary>
                Получение объекта ITransaction с одновременно началом трансакции
            </summary>
            <returns>ITransaction</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
                Получение объекта ITransaction с одновременно началом трансакции, с параметрами
            </summary>
            <param name="value">Параметр изоляции транакции</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.Get``1(System.Object)">
            <summary>
                Получение объекта по первичному ключу
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="id">Значение первичного ключа</param>
            <returns>Полученый объект, в случае отсутствия  в базe - NULL</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.TableCreate``1">
            <summary>
                Создание таблицы
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ORM_1_21_.ISession.DropTable``1">
            <summary>
                Удаление таблицы
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ORM_1_21_.ISession.TableExists``1">
            <summary>
                Проверка на существование таблицы в базе
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.ExecuteReader(System.String,System.Object[])">
            <summary>
                ExecuteReader ( закрываем сами)
            </summary>
            <param name="sql"></param>
            <param name="obj">параметры</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.ExecuteReaderT(System.String,System.Int32,System.Object[])">
            <summary>
            ExecuteReader ( закрываем сами)
            </summary>
            <param name="sql"></param>
            <param name="timeOut">таймаут</param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.GetDataTable(System.String,System.Int32)">
            <summary>
            </summary>
            <param name="sql"></param>
            <param name="timeout">таймаут</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.GetTableNames">
            <summary>
                возвращает список названия таблиц из базы
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.CreateBase(System.String)">
            Создает базу данных
            <param name="baseName">название базы для Mysql  , путь до базы для Postgesql,Sqlite,MSSql</param>
            <returns>-1 успешно</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.InsertBulk``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Int32)">
            <summary>
                Вставка в базу из файла
            </summary>
            <param name="list">список вставляемых объектов</param>
            <param name="fileCsv">название файла куда будет трансформироваться список</param>
            <param name="FIELDTERMINATOR">разделитель полей</param>
            <param name="timeOut"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ORM_1_21_.ISession.InsertBulkFomFile``1(System.String,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="fileCsv">полный путь к файлу, уже записаному и готовому для вставки в базу</param>
            <param name="FIELDTERMINATOR"></param>
            <param name="timeOut"></param>
            <typeparam name="T">разделитель полей</typeparam>
        </member>
        <member name="M:ORM_1_21_.ISession.ExecuteScalar(System.String,System.Object[])">
            <summary>
                Возвращает первый элемент запроса
            </summary>
            <param name="sql">строка запроса</param>
            <param name="obj">параметры запроса</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.ExecuteScalarT(System.String,System.Int32,System.Object[])">
            <summary>
                Возвращает первый элемент запроса
            </summary>
            <param name="sql">строка запроса</param>
            <param name="timeOut">timeout default 30 </param>
            <param name="obj">параметры запроса</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.TruncateTable``1">
            <summary>
                Пересоздание таблицы
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ORM_1_21_.ISession.Querion``1">
            <summary>
                Выборка через Linq to Sql
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.QuerionAsync``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.IsPersistent(System.Object)">
            <summary>
                Определяет, получен ли объект с базы, или был создан на клиенте
            </summary>
            <param name="obj">Объект проверяемый</param>
            <returns>True -из базы, False - созданный на клиенте</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.ToPersistent(System.Object)">
            <summary>
                Делаем объект персистентным
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:ORM_1_21_.ISession.WriteLogFile(System.String)">
            <summary>
                Запись в лог, если запись в лог включена, при инициализации орм, можно записать текст сообщенгия напрямую
            </summary>
            <param name="message">сообщение</param>
        </member>
        <member name="M:ORM_1_21_.ISession.GetCommand">
            <summary>
                Получение автономного IDbCommand, закрывать и диспозить на вашей совести
            </summary>
            <returns>IDbCommand</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.GetConnection">
            <summary>
                Получение автономного соединения в контексте орм, закрывать и очишать вручную
            </summary>
            <returns>IDbConnection</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.GetDataAdapter">
            <summary>
                Пролучение адаптреа, автономного в контексте орм, закрывать и очищать вручную
            </summary>
            <returns>IDbDataAdapter</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.GetDataParameter">
            <summary>
                Получение параметра в контектсе орм
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.GetConnectionString">
            <summary>
                Получение строки соединения в контексте работы орм
            </summary>
            <returns>Строка соединения</returns>
        </member>
        <member name="M:ORM_1_21_.ISession.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            </summary>
            <param name="sql"></param>
            <param name="obj"></param>
        </member>
        <member name="M:ORM_1_21_.ISession.ExecuteNonQueryT(System.String,System.Int32,System.Object[])">
            <summary>
            </summary>
            <param name="sql"></param>
            <param name="timeOut"></param>
            <param name="obj"></param>
        </member>
        <member name="M:ORM_1_21_.ISession.TableName``1">
            <summary>
                Получение названия таблицы, для построения sql запроса.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.ColumnName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            возвращает название поля для базы
            </summary>
            <param name="property"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.InsertCommand``1(``0)">
            <summary>
            Получает SQL строку Insert (бойся иньекций)
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.ISession.DeleteCommand``1(``0)">
            <summary>
            Строка запроса на удаление
            </summary>
            <param name="t"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ORM_1_21_.Properties.Resources">
            <summary>
              Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
            </summary>
        </member>
        <member name="P:ORM_1_21_.Properties.Resources.ResourceManager">
            <summary>
              Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
            </summary>
        </member>
        <member name="P:ORM_1_21_.Properties.Resources.Culture">
            <summary>
              Перезаписывает свойство CurrentUICulture текущего потока для всех
              обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
            </summary>
        </member>
        <member name="P:ORM_1_21_.Properties.Resources.SQL">
             <summary>
               Ищет локализованную строку, похожую на &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;SQL&gt;
              &lt;MSSql pref=&quot;SELECT IDENT_CURRENT (&apos;{1}&apos;);&quot; prefparam=&quot;@&quot;/&gt;
              &lt;MySql pref=&quot;;SELECT LAST_INSERT_ID()&quot; prefparam=&quot;?&quot;/&gt;
            &lt;/SQL&gt;
            .
             </summary>
        </member>
        <member name="T:ORM_1_21_.Sessione">
            <summary>
            </summary>
        </member>
        <member name="M:ORM_1_21_.Sessione.Delete``1(``0)">
            <summary>
                Удаление объекта из базы
            </summary>
            <typeparam name="T">Тип удаляемого объекта</typeparam>
            <param name="item">Удаляемый объект</param>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetListMonster``1(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.Save``1(``0)">
            <summary>
                Сохранение обьекта в базе равно как вставка и изменение
            </summary>
            <typeparam name="T">Тип обьекта</typeparam>
            <param name="item">сохраняемый объект</param>
        </member>
        <member name="M:ORM_1_21_.Sessione.Get``1(System.Object)">
            <summary>
                Получение объекта по первичному ключу
            </summary>
            <typeparam name="T">Тип объекта</typeparam>
            <param name="id">Значение первичного ключа</param>
            <returns>Полученый объект, в случае отсутствия  в базe - NULL</returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetList``1(System.String,System.Object[])">
            <summary>
                запрос на выборку с параметрами
            </summary>
            <param name="sqlWhere">запрос на выборку, начиная с where  с праметрами</param>
            <param name="obj">список параметров в той последовательности в которой они идут в запросе.</param>
            <typeparam name="T">Тип сущности</typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.TableCreate``1">
            <summary>
                Создание таблицы
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ORM_1_21_.Sessione.GeDbCommand">
            <summary>
                Получение IDbCommand,Закрывать соединение вручную
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.DropTable``1">
            <summary>
                Удаление таблицы
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ORM_1_21_.Sessione.TableExists``1">
            <summary>
                Проверка на существование таблицы
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.ExecuteReader(System.String,System.Object[])">
            <summary>
                Пожарынй шланг данных
            </summary>
            <param name="sql"></param>
            <param name="objects">параметры</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.ExecuteReaderT(System.String,System.Int32,System.Object[])">
            <summary>
            
            </summary>
            <param name="sql"></param>
            <param name="timeOut"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetDataTable(System.String,System.Int32)">
            <summary>
                получение DataTable
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetTableNames">
            <summary>
            Список таблиц в базе
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.CreateBase(System.String)">
            <summary>
            Создает базу данных
            </summary>
            <param name="baseName">название базы для Mysql  , путь до базы для Postgesql,Sqlite,MSSql</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.InsertBulk``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.Int32)">
            <summary>
            </summary>
            <param name="list"></param>
            <param name="fileCsv"></param>
            <param name="fieldterminator"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.InsertBulkFomFile``1(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="fileCsv"></param>
            <param name="fieldterminator"></param>
            <param name="timeOut"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.ExecuteScalar(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="sql"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.ExecuteScalarT(System.String,System.Int32,System.Object[])">
            <summary>
            
            </summary>
            <param name="sql"></param>
            <param name="timeOut"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.TruncateTable``1">
            <summary>
            Очистка таблицы
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.Querion``1">
            <summary>
                Получения выражения ling to SQL
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetConnectionString">
            <summary>
                Строка подключения
            </summary>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
                Без возврата результата
            </summary>
            <param name="sql"></param>
            <param name="obj"></param>
        </member>
        <member name="M:ORM_1_21_.Sessione.ExecuteNonQueryT(System.String,System.Int32,System.Object[])">
            <summary>
            Выполнение запроса с параметрами и TimeOut
            </summary>
            <param name="sql"></param>
            <param name="timeOut"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.TableName``1">
            <summary>
                table name from base
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetList``1(``0,System.String)">
            <summary>
                Получения списка прототипов объекта
            </summary>
            <param name="obj">прототип</param>
            <param name="sqlWhere">запрос Where включительно</param>
            <param name="isCache">использование кеша</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetList``1(System.String)">
            <summary>
                Возвращает лист объектов  табличной сущности
            </summary>
            <typeparam name="T">Тип класа сущности</typeparam>
            <param name="sqlWhere">
                Запрос на выборку начиная с Where, Where включительно
                для полной выборки можно указать "" или NULL
            </param>
            <returns>Лист оьектов сущности</returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetReal``1(System.Object)">
            <summary>
            </summary>
            <param name="id"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.GetList``1">
            <summary>
                Возвращает лист оъектов  табличной сущности
            </summary>
            <typeparam name="T">Тип класса сущности</typeparam>
            <returns>Лист оьектов сущности</returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.QuerionAsync``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.ColumnName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
             <summary>
            возвращает название поля для таблицы
             </summary>
             <param name="property"></param>
             <typeparam name="T"></typeparam>
             <returns></returns>
             <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.InsertCommand``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.DeleteCommand``1(``0)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.#ctor(System.String)">
            <summary>
            Конструктор 
            </summary>
            <param name="connectionString">Строка соединения с базой</param>
            <param name="writeLog">ключ для записи в лог файл</param>
        </member>
        <member name="M:ORM_1_21_.Sessione.BeginTransaction">
            <summary>
            Получение объекта ITransaction с одновременно началом трансакции
            </summary>
            <returns>ITransaction</returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
             Получение объекта ITransaction с одновременно началом трансакции
            </summary>
            <param name="value">Уровни изоляции</param>
            <returns>ITransaction</returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.Dispose">
            <summary>
             Овобождение ресурсов
            </summary>
        </member>
        <member name="M:ORM_1_21_.Sessione.Finalize">
            <summary>
            Позволяет объекту <see cref="T:System.Object"/> попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как объект 
            <see cref="T:System.Object"/> будет утилизирован в процессе сборки мусора.
            </summary>
        </member>
        <member name="M:ORM_1_21_.Sessione.WriteLogFile(System.String)">
            <summary>
            Запись в лог файл
            </summary>
            <param name="message">текст ошибки</param>
        </member>
        <member name="M:ORM_1_21_.Sessione.WriteLogFile(System.Data.IDbCommand)">
            <summary>
            Писать в лог файл напрямую
            </summary>
            <param name="command"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ORM_1_21_.Sessione.IsPersistent(System.Object)">
            <summary>
            Определяет, откуда объект
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Sessione.ToPersistent(System.Object)">
            <summary>
            Пометить обьект, что он получен из базы
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:ORM_1_21_.Transaction.ITransaction">
            <summary>
            Транзакциая
            </summary>
        </member>
        <member name="M:ORM_1_21_.Transaction.ITransaction.Commit">
            <summary>
            Завершить транзакцию
            </summary>
        </member>
        <member name="M:ORM_1_21_.Transaction.ITransaction.Rollback">
            <summary>
            Откатить транзакцию
            </summary>
        </member>
        <member name="T:ORM_1_21_.Transaction.Transactionale">
            <summary>
            Тип контейнер,содержит данные для трансакции,
            занятость трансакции, фабрику для транакций
            </summary>
        </member>
        <member name="T:ORM_1_21_.IValidateDal`1">
             <summary>
            Проверка вводимых данных, для проверки отнаследуйте свой табличный класс от этого интерфейса
            и проверяйте данные перед модификацией в таблице.
             </summary>
             <typeparam name="T">Тип вашего табличного класса</typeparam>
        </member>
        <member name="M:ORM_1_21_.IValidateDal`1.Validate(`0)">
            <summary>
            Проверка вводимых данных, для проверки отнаследуйте свой табличный класс от этого интерфейса
            </summary>
            <param name="item">Проверяемый объект</param>
        </member>
        <member name="T:ORM_1_21_.Utils">
            <summary>
                Утилиты
            </summary>
        </member>
        <member name="F:ORM_1_21_.Utils.Table1AliasForJoin">
            <summary>
            </summary>
        </member>
        <member name="M:ORM_1_21_.Utils.IsAnonymousType(System.Type)">
            <summary>
                Определяем, является ли тип анонимным
            </summary>
            <param name="type">Тип для исследования</param>
            <returns>bool</returns>
        </member>
        <member name="M:ORM_1_21_.Utils.ObjectToByteArray(System.Object)">
            <summary>
                Сериализация  объекта
            </summary>
            <param name="obj">Объект</param>
            <returns>byte[]</returns>
        </member>
        <member name="M:ORM_1_21_.Utils.ByteArrayToObject(System.Byte[])">
            <summary>
                Десерелизация
            </summary>
            <param name="arrBytes">byte[]</param>
            <returns>Объект</returns>
        </member>
        <member name="M:ORM_1_21_.Utils.ImageToByte(System.Drawing.Image)">
            <summary>
                Получение массива байт из Image
            </summary>
            <param name="img">Image</param>
            <returns></returns>
        </member>
        <member name="M:ORM_1_21_.Utils.ImageFromByte(System.Byte[])">
            <summary>
                Получение Image из массива байт
            </summary>
            <param name="img"></param>
            <returns></returns>
        </member>
    </members>
</doc>
